import "dotenv/config";

import { readFileSync } from "fs";
import { join } from "path";

import {
  CapabilityAliasGroup,
  MemoryProvider,
  ModelProvider,
  Plugin,
  Runtime
} from "@maiar-ai/core";
import { stdout, websocket } from "@maiar-ai/core/dist/logger";

import {
  OpenAIModelProvider,
  OpenAIMultiModalTextGenerationModel,
  OpenAIImageGenerationModel
} from "@maiar-ai/model-openai";

import { SQLiteMemoryProvider } from "@maiar-ai/memory-sqlite";

import { CharacterPlugin } from "@maiar-ai/plugin-character";
import { ImageGenerationPlugin } from "@maiar-ai/plugin-image";
import { TextGenerationPlugin } from "@maiar-ai/plugin-text";

// Configure and start the MAIAR AI agent
async function main() {
  const modelProviders: ModelProvider[] = [
    new OpenAIModelProvider({
      models: [
        OpenAIMultiModalTextGenerationModel.GPT_41,
        OpenAIImageGenerationModel.DALLE_3
      ],
      apiKey: process.env.OPENAI_API_KEY as string
    })
  ];

  const memoryProvider: MemoryProvider = new SQLiteMemoryProvider({
    dbPath: join(process.cwd(), "data", "conversations.db")
  });

  const plugins: Plugin[] = [
    new TextGenerationPlugin(),
    new ImageGenerationPlugin(),
    new CharacterPlugin({
      character: readFileSync(join(process.cwd(), "character.xml"), "utf-8")
    })
  ];

  const capabilityAliases: CapabilityAliasGroup[] = [];

  const agent = await Runtime.init({
    modelProviders,
    memoryProvider,
    plugins,
    capabilityAliases,
    options: {
      logger: {
        level: "debug",
        transports: [stdout, websocket({ path: "/monitor" })]
      },
      server: {
        port: 3000
      }
    }
  });

  await agent.start();
}

// Run the MAIAR AI agent
(async () => {
  try {
    console.log("[DRIVER] Starting agent...");
    await main();
  } catch (error) {
    console.error("[DRIVER] Failed to start agent");
    console.error(error);
    process.exit(1);
  }
})();
